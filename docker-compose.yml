x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: services/airflow/Dockerfile
  env_file:
    - ./.env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'True'
    AIRFLOW__WEBSERVER__AUTHENTICATION: "None"
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__WEBSERVER__UPDATE_FAB_PERMS: 'False'

    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow

    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'

    # --- Variables de Entorno para tu Aplicaci칩n RAG ---
    # Estas se pasar치n al entorno del DAG de Airflow
    # para que pueda conectarse a los servicios RAG (PostgreSQL App, Qdrant)
    DB_HOST: ${RAG_DB_HOST}
    DB_PORT: ${RAG_DB_PORT}
    DB_NAME: ${RAG_DB_NAME}
    DB_USER: ${RAG_DB_USER}
    DB_PASSWORD: ${RAG_DB_PASSWORD}
    QDRANT_HOST: ${RAG_QDRANT_HOST}
    QDRANT_PORT: ${RAG_QDRANT_PORT}
    OPENAI_API_KEY: ${RAG_OPENAI_API_KEY}
    OPENAI_BASE_URL: ${RAG_OPENAI_BASE_URL}
    MODEL_NAME: ${RAG_MODEL}

  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/services/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/services/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/services/airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/services/airflow/plugins:/opt/airflow/plugins

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
    qdrant:
      condition: service_started

services:
  postgres:
    container_name: postgres
    image: postgres:16
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - rag_network

  # Base de datos para feedback y metadatos
  postgres_app:
    container_name: postgres_app
    image: postgres:13
    environment:
      POSTGRES_USER: ${APP_DB_USER}
      POSTGRES_PASSWORD: ${APP_DB_PASSWORD}
      POSTGRES_DB: ${APP_DB_NAME}
    volumes:
      - postgres_app_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d processed_documents"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - rag_network

  # --- Servicio de base de datos vectorial (Qdrant) ---
  qdrant:
    container_name: qdrant
    image: qdrant/qdrant
    volumes:
      - qdrant_storage_volume:/qdrant/storage
    ports:
      # Exp칩n puertos si necesitas acceder desde fuera de docker-compose (opcional)
      - "6333:6333"
      - "6334:6334"
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - rag_network

  # Servicio RAG Core (API para compartir l칩gica)
  rag-core:
    container_name: rag-core
    build: 
      context: .
      dockerfile: services/rag-core/Dockerfile
    environment:
      - QDRANT_HOST=${RAG_QDRANT_HOST}
      - QDRANT_PORT=${RAG_QDRANT_PORT}
      - DB_HOST=${RAG_DB_HOST}
      - DB_PASSWORD=${RAG_DB_PASSWORD}
      - DB_PORT=${RAG_DB_PORT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    env_file:
      - .env 
    ports:
      - "8000:8000"
    command: >
      sh -c "python /app/src/rag_pdf_processor/utils/initialize_database.py &&
             uvicorn api:app --host 0.0.0.0 --port 8000"
    depends_on:
      - postgres_app
      - qdrant
    volumes:
      - ./services/rag-core/data:/app/data
      - ./services/rag-core/chunks:/app/chunks
      - ./services/rag-core/models:/app/models
      - ./services/rag-core:/app
      - ./sdm_manuals:/app/sdm_manuals
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 1G
    networks:
      - rag_network

  # Frontend Streamlit
  frontend:
    container_name: frontend
    build: 
      context: .
      dockerfile: services/frontend/Dockerfile
    ports:
      - "8501:8501"
    environment:
      - QDRANT_HOST=${QDRANT_HOST}
      - QDRANT_PORT=${QDRANT_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - RAG_CORE_API=http://rag-core:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    env_file:
      - .env 
    depends_on:
      - postgres_app
      - qdrant
      - rag-core
    networks:
      - rag_network
  
  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - rag_network

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - rag_network

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - rag_network

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    networks:
      - rag_network

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on
    networks:
      - rag_network

volumes:
  postgres-db-volume:
    driver: local
  postgres_app_volume:
    driver: local
  qdrant_storage_volume:
    driver: local

networks:
  rag_network:
    driver: bridge