import fitz  # PyMuPDF
import os

def extract_pages(input_pdf_path, output_pdf_path, start_page, end_page):
    """
    Extrae un rango de p√°ginas de un PDF y guarda el resultado en un nuevo archivo.

    Args:
        input_pdf_path (str): Ruta al archivo PDF de entrada.
        output_pdf_path (str): Ruta donde se guardar√° el PDF resultante.
        start_page (int): N√∫mero de la primera p√°gina a incluir (1-indexed).
        end_page (int): N√∫mero de la √∫ltima p√°gina a incluir (1-indexed).
    """
    # Aseg√∫rate de que los n√∫meros de p√°gina sean v√°lidos
    doc = fitz.open(input_pdf_path)
    total_pages = len(doc)

    # Convertir a 0-indexed para PyMuPDF
    start_index = start_page - 1
    end_index = end_page - 1

    if start_index < 0 or end_index >= total_pages or start_index > end_index:
        print(f"Error: El rango de p√°ginas {start_page}-{end_page} no es v√°lido para un PDF de {total_pages} p√°ginas.")
        doc.close()
        return

    # Seleccionar solo las p√°ginas deseadas
    doc.select([i for i in range(start_index, end_index + 1)])

    # Guardar el nuevo PDF
    doc.save(output_pdf_path)
    doc.close()
    print(f"‚úÖ PDF extra√≠do guardado como: {output_pdf_path}")

def main():
    """Funci√≥n principal para interactuar con el usuario."""
    # Obtener el nombre del script y asumir que el PDF est√° en el mismo directorio
    script_dir = os.path.dirname(os.path.abspath(__file__))
    # Opcional: Solicitar nombre del archivo PDF
    pdf_filename = input("Ingresa el nombre del archivo PDF (incluyendo la extensi√≥n .pdf): ")
    input_pdf_path = os.path.join(script_dir, pdf_filename)

    if not os.path.exists(input_pdf_path):
        print(f"‚ùå Error: No se encontr√≥ el archivo {input_pdf_path}")
        return

    try:
        start_page = int(input("Ingresa el n√∫mero de la p√°gina de inicio (primera p√°gina es 1): "))
        end_page = int(input("Ingresa el n√∫mero de la p√°gina final: "))
    except ValueError:
        print("‚ùå Error: Por favor, ingresa n√∫meros v√°lidos para las p√°ginas.")
        return

    # Nombre del archivo de salida
    base_name, ext = os.path.splitext(pdf_filename)
    output_pdf_path = os.path.join(script_dir, f"{base_name}_extracted_pages_{start_page}_to_{end_page}{ext}")

    print(f"\nüìÑ Procesando '{pdf_filename}'...")
    print(f"‚úÇÔ∏è  Extrayendo p√°ginas {start_page} a {end_page}...")
    extract_pages(input_pdf_path, output_pdf_path, start_page, end_page)

if __name__ == "__main__":
    main()